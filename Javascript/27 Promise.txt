1) What is promise? Object


  1.1) returns a single value with resolved value			//promise state = fulfilled
  1.2) reason why not resolved ex network error etc			//promise state = rejected
  1.3) operation still ongoing					//promise state = pending



2) How to create a promise?

const promise = new Promise(
  (resolve) => {
    setTimeout(() => {
      resolve("I'm a Promise!");
    }, 5000);
  },
  (reject) => {}
);

promise.then((value) => console.log(value));		


3) promise lifecycle

	3.1) Promise in pending
	  3.1.1) if promise fulfilled
	   	    .then(onFullfillment) --> async Actions
	
	  3.1.2) if promise rejected
	   	    .then(onRejection)
		    .catch(onRejection)   --> Error handling

	3.2) Promise in pending
	3.3) .then()
	     .catch()



4) Why promise? Alternative to callbacks --> help handle asynchronous operations

5) Rules of a promise
	supplies standard compliant .then()
	pending promise --->fulfilled or rejected ---> settled --> value wont change

6) What is handler in javascript? //handler = event handler
	Function that responds to specific event(user action,asynchronous operation completing)
Ex. anonymous function attached to button
when event occurs --> handler function executes
// HTML
<button id="myButton">Click me!</button>

// JavaScript
document.getElementById("myButton").addEventListener("click", function() {
  alert("Button clicked!");
});


6.2) What is .then()? handler used with promises
	What use? handle result of asynchoronous operation

Forex. .then() handles successful fullfillment of promise
when promise resolves --> function passed to .then() is called with whatever returned  result of promise

// Create a promise that resolves after 1 second
const myPromise = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve("Hello, world!");
  }, 1000);
});

// Use .then() to handle the successful fulfillment of the promise
myPromise.then((result) => {
  console.log(result); // Output: "Hello, world!"
});


7) What is promise chaining?

new Promise(function (resolve, reject) {
  setTimeout(() => resolve(1), 1000);    //initial promise resolves in 1 second
})						     //resolves with value =1 after 1 second
							
  .then(function (result) {
    console.log(result); // 1		    //.then() call --> log(result) --> return promise 						    //with  value result*2
    return result * 2;			    
  })
  .then(function (result) {		    //pass 2
    console.log(result); // 2
    return result * 3;
  })
  .then(function (result) {		    //pass 6
    console.log(result); // 6
    return result * 4;
  });



8) What is promise.all()

input: array of promises
when all promises resolved --> resolves
any 1 promise reject       --> reject promise 

Promise.all([Promise1, Promise2, Promise3]) .then(result) => {   console.log(result) }) .catch(error => console.log(`Error in promises ${error}`))



const promise1 = new Promise((resolve, reject) => {	//promise1 --> resolves after 1 										//second
  setTimeout(() => resolve("Hello"), 1000);
});

const promise2 = new Promise((resolve, reject) => {	//resolves after 2 second
  setTimeout(() => resolve("World"), 2000);		
});

Promise.all([promise1, promise2])		//resolves with [Hello, World]
  .then(values => {	
    console.log(values); // ["Hello", "World"]
  })
  .catch(error => {
    console.error(error); // If any promise is rejected, this will be called
  });


Conclusion: promise.all() waits for all promises in array to fulfill or reject before resolving/rejecting itself



9) Race method in promise ---> Promise.race()

does what? returns promise instance that resolves first


var promise1 = new Promise(function (resolve, reject) {	resolves 2nd
  setTimeout(resolve, 500, "one");
});
var promise2 = new Promise(function (resolve, reject) {	resolves 1st
  setTimeout(resolve, 100, "two");
});

Promise.race([promise1, promise2]).then(function (value) {
  console.log(value); // "two" // Both promises will resolve, but promise2 is faster
});			//returns promise 'two' since resolves 1st


