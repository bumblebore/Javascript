1) What are events?

Web page has finished loading
Input field was changed
Button was clicked


1.1) Event handling
	//attach a function addEventListener() to button using .addEventListener()
	//function will execute when button clicked
	//trigger specific actions on user behaviours events
	//can also 	listen for events generated by browser/other web page parts

<button id="my-button">Click me!</button>

<script>
  const button = document.getElementById('my-button');
  button.addEventListener('click', () => {
    alert('Button clicked!');
  });
</script>



1.2) Event Propogation
Objective: 'outer' and 'inner' div both handle click event
If not for it--> clicking inner event -->also trigger click for outer event
//Event propogate up the DOM tree
//How to stop? event.stopPropogation()

<div id="outer">
  <div id="inner">Click me!</div>
</div>

<script>
  const outer = document.getElementById('outer');
  const inner = document.getElementById('inner');
  outer.addEventListener('click', () => {
    console.log('Outer clicked');
  });
  inner.addEventListener('click', (event) => {
    console.log('Inner clicked');
    event.stopPropagation();
  });
</script>



1.3) Delegation
Objective: handle events for multiple events with 1 event listener
Ex handle click  event for list of items

<ul id="my-list">
  <li>Item 1</li>
  <li>Item 2</li>
  <li>Item 3</li>
</ul>

<script>
  const list = document.getElementById('my-list');
  list.addEventListener('click', (event) => {
    if (event.target.tagName === 'LI') {				//common logic to target group 										//of events
      console.log('Clicked item:', event.target.innerText);
    }
  });
</script>



1.4) Event object
	type = what type of event ex click,keydown,submit
	target= which element triggered the event
	event coordinates
	event modifiers
	event propogation methods

Ex below we use 'event' object to access event type and target element

<button id="my-button">Click me!</button>

<script>
  const button = document.getElementById('my-button');
  button.addEventListener('click', (event) => {
    console.log('Event type:', event.type);
    console.log('Target element:', event.target);
  });
</script>


1.5) Custom events
				CustomEvent(//name of event,  //Custom data)
const myEvent = new CustomEvent('my-event', {	//Create
  detail: { message: 'Hello world!' }		
});

document.addEventListener('my-event', (event) => {	//attach event listener to document	

  console.log('Custom event received:', event.detail.message);  //when event triggered -> 											//callback function
});

document.dispatchEvent(myEvent);		//manually dispatch the event


>Output: Custom event received: Hello world!





1.6) Asynchronous events

const myButton = document.getElementById('my-button');
myButton.addEventListener('click', () => {
  fetch('/api/data')
    .then(response => response.json())
    .then(data => {
      console.log('Data received:', data);
      // Update UI with new data
    })
    .catch(error => {
      console.error('Error fetching data:', error);
    });
});



1.7) Cross browser evenet

const myButton = document.getElementById('my-button');
myButton.addEventListener('click', (event) => {
  event.preventDefault(); // Prevent default form submission behavior
  const formData = new FormData(document.getElementById('my-form'));
  const xhr = new XMLHttpRequest();
  xhr.open('POST', '/api/data');
  xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
  xhr.onreadystatechange = () => {
    if (xhr.readyState === 4 && xhr.status === 200) {
      console.log('Data submitted successfully');
      // Update UI with success message
    } else if (xhr.readyState === 4 && xhr.status !== 200) {
      console.error('Error submitting data:', xhr.statusText);
      // Update UI with error message
    }
  };
  xhr.send(new URLSearchParams(formData).toString());
});



2) How to cancel an event? preventDefault()

document
  .getElementById("link")
  .addEventListener("click", function (event) {
    event.preventDefault();
  });


3) How to stop event from bubbling up?

<p>Click DIV1 Element</p>
<div onclick="secondFunc()">DIV 2
  <div onclick="firstFunc(event)">DIV 1</div>
</div>

<script>
function firstFunc(event) {
  alert("DIV 1");
  event.stopPropagation();
}

function secondFunc() {
  alert("DIV 2");
}
</script>
	